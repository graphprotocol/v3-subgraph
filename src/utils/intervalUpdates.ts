import { ZERO_BD, ZERO_BI, ONE_BI } from './constants'
/* eslint-disable prefer-const */
import {
  UniswapDayData,
  Factory,
  Pool,
  PoolDayData,
  Token,
  TokenDayData,
  TokenHourData,
  Bundle,
  PoolHourData,
  TickDayData,
  Tick
} from './../types/schema'
import { FACTORY_ADDRESS } from './constants'
import { BigDecimal, ethereum } from '@graphprotocol/graph-ts'
import assert from 'assert'
import { convertTokenToDecimal } from '.'

// This class should be autogenerated from the schema
export class UniswapData {
  static add(timestamp: i32, volumeETH: BigDecimal,
    volumeUSD: BigDecimal, feesUSD: BigDecimal, tvlUSD: BigDecimal) {
    assert(false, "not implemented")
  }
}

/**
 * Tracks global aggregate data over daily windows
 * @param event
 */
export function updateUniswapDayData(event: ethereum.Event, volumeETH: BigDecimal,
  volumeUSD: BigDecimal, feesUSD: BigDecimal) {
  let uniswap = Factory.load(FACTORY_ADDRESS)
  let timestamp = event.block.timestamp.toI32()
  UniswapData.add(timestamp, volumeETH, volumeUSD, feesUSD, uniswap.totalValueLockedUSD)
}

// This class should be autogenerated from the schema
export class TokenData {
  static add(timestamp: i32, token: Token,
    tokenPrice: BigDecimal, volume: BigDecimal,
    volumeUSD: BigDecimal, feesUSD: BigDecimal) {
    assert(false, "not implemented")
  }
}

export function updateTokenData(token: Token, event: ethereum.Event, volume: BigDecimal, volumeUSD: BigDecimal, feesUSD: BigDecimal) {
  let bundle = Bundle.load('1')
  let timestamp = event.block.timestamp.toI32()
  let tokenPrice = token.derivedETH.times(bundle.ethPriceUSD)

  TokenData.add(timestamp, token, tokenPrice, volume, volumeUSD, feesUSD)
}
