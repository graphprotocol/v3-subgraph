import { ZERO_BD, ZERO_BI, ONE_BI } from './constants'
/* eslint-disable prefer-const */
import {
  UniswapDayData,
  Factory,
  Pool,
  PoolDayData,
  Token,
  TokenDayData,
  TokenHourData,
  Bundle,
  PoolHourData,
  TickDayData,
  Tick
} from './../types/schema'
import { FACTORY_ADDRESS } from './constants'
import { BigDecimal, ethereum } from '@graphprotocol/graph-ts'
import assert from 'assert'
import { convertTokenToDecimal } from '.'

// This class should be autogenerated from the schema
export class UniswapData {
  constructor(timestamp: i32, volumeETH: BigDecimal,
    volumeUSD: BigDecimal, feesUSD: BigDecimal, tvlUSD: BigDecimal) {
    assert(false, "not implemented")
  }

  save(): void {
    assert(false, "not implemented")
  }
}

/**
 * Tracks global aggregate data over daily windows
 * @param event
 */
export function updateUniswapDayData(event: ethereum.Event, volumeETH: BigDecimal,
  volumeUSD: BigDecimal, feesUSD: BigDecimal) {
  let uniswap = Factory.load(FACTORY_ADDRESS)
  let timestamp = event.block.timestamp.toI32()
  let data = new UniswapData(timestamp, volumeETH, volumeUSD, feesUSD, uniswap.totalValueLockedUSD)
  data.save()
}

// This class should be autogenerated from the schema
export class TokenData {
  constructor(timestamp: i32, token: Token,
    tokenPrice: BigDecimal, volume: BigDecimal,
    volumeUSD: BigDecimal, feesUSD: BigDecimal) {
    assert(false, "not implemented")
  }

  save(): void {
    assert(false, "not implemented")
  }
}

export function updateTokenData(token: Token, event: ethereum.Event, volume: BigDecimal, volumeUSD: BigDecimal, feesUSD: BigDecimal) {
  let bundle = Bundle.load('1')
  let timestamp = event.block.timestamp.toI32()
  let tokenPrice = token.derivedETH.times(bundle.ethPriceUSD)

  let tokenData = new TokenData(timestamp, token, tokenPrice, volume, volumeUSD, feesUSD)
  tokenData.save()
}

// This class should be autogenerated from the schema
export class TickData {
  // The type of the `pool` parameter is a bit sketchy: we don't need the
  // full pool and don't want to force loading it, but there's no way to
  // know that in the code generator
  constructor(timestamp: i32, tick: Tick, pool: Pool | string) {
    assert(false, "not implemented")
  }

  save(): void {
    assert(false, "not implemented")
  }
}

export function updateTickData(tick: Tick, event: ethereum.Event) {
  let tickData = new TickData(event.block.timestamp.toI32(), tick, tick.pool)
  tickData.save()
}
